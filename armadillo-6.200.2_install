#!/usr/bin/env bash

DESCRIPTION="Streamlined C++ linear algebra library"
SRC_URI="http://sourceforge.net/projects/arma/files/armadillo-6.200.2.tar.gz"

# Fetches the package
pkg_fetch() {
  curl -s -o "${A}" -L "${SRC_URI}"
}

# Unpacks the package
src_unpack() {
  local extension="${A##*.}"
  local output="${A%.*}"
  case "${extension}" in
    zip)
      unzip "${A}" -d "${WORKDIR}"
      ;;
    bz2|gz|xz)
      if [ "${output##*.}" == "tar" ]
        then
        case "${extension}" in
          bz2)
            tar -jxf "${A}" -C "${WORKDIR}"
            ;;
          gz)
            tar -zxf "${A}" -C "${WORKDIR}"
            ;;
          xz)
            tar -Jxf "${A}" -C "${WORKDIR}"
            ;;
        esac
      fi
      ;;
    tbz)
      tar -jxf "${A}" -C "${WORKDIR}"
      ;;
    tgz)
      tar -zxf "${A}" -C "${WORKDIR}"
      ;;
    txz)
      tar -Jxf "${A}" -C "${WORKDIR}"
      ;;
  esac
}

# Patches the source prior to compiling
src_prepare() {
#  for patch in "${FILESDIR}"/*_"${P}"-*.patch
#    do
#    patch -p0 < "${patch}"
#  done
  true
}

# Runs configure or cmake
src_configure() {
  if [ -f CMakeLists.txt ]
    then
    S="${S}/build"
    [ -d "build" ] && rm -rf "build"
    mkdir "build"
    pushd "build"
    cmake -DCMAKE_INSTALL_PREFIX="${DESTDIR}" ..
    popd
  elif [ -x configure ]
    then
    ./configure --prefix="${DESTDIR}"
  fi
}

src_compile() {
  make -C "${S}"
}

src_install() {
  make DESTDIR= -C "${S}" install
}

pkg_postinst() {
  echo "Writing modulefile to ${MODULEFILE}"
  mkdir -p "${MODULEFILE%/*}"
  cat > "${MODULEFILE}" <<EOF
#%Module -*- tcl -*-
##
## dot modulefile
##
proc ModulesHelp { } {
  puts stderr "\tAdds ${PN}"
}

module-whatis "${DESCRIPTION}"

set             root            ${DESTDIR}

conflict ${PN}

append-path LD_RUN_PATH       \$root/lib
append-path LD_LIBRARY_PATH   \$root/lib
append-path CMAKE_PREFIX_PATH \$root
append-path CPATH             \$root/include
append-path INCLUDE_PATH      \$root/include
append-path LIBRARY_PATH      \$root/lib

setenv  ${PN}_LIBRARY_DIR     \$root/lib
setenv  ${PN}_INCLUDE_DIR     \$root/include
EOF
}


export WORKDIR="${TMPDIR:-/tmp}"

# ${A} is the archive name e.g. armadillo-6.200.2.tar.gz
export A="${WORKDIR}/${SRC_URI##*/}"

# ${P} is the package name without the extension e.g. armadillo-6.200.2
export P="${A%.*}"
P="${P##*/}"
# Handle tar files with two extensions
if [ "${P##*.}" == "tar" ]
  then
  P="${P%.*}"
fi

# ${PN} is the package name without the version e.g. armadillo
export PN="${P%-*}"

# ${PV} is the package version  e.g. 6.200.2
export PV="${P##*-}"

# ${FILESDIR} is where the patches are stored
export FILESDIR="$(cd $(dirname ${BASH_SOURCE[0]}) && pwd)/${P}-patches"

# ${S} is the build directory
export S="${WORKDIR}/${P}"

export DESTDIR="${DESTDIR:-${PREFIX}/${PN}/${PV}}"
export MODULEFILE="${MODULEFILE:-${DESTDIR}/${P}}"

echo "Fetching ${A} from ${SRC_URI}"
pkg_fetch
echo "Unpacking ${A} to ${WORKDIR}"
src_unpack

pushd "${S}" 2>&1 > /dev/null
echo "Patching"
src_prepare
echo "Configuring"
src_configure
echo "Compiling source in ${WORKDIR}"
src_compile
echo "Installing to ${DESTDIR}"
src_install
echo "Performing post-installation setup"
pkg_postinst
popd 2>&1 > /dev/null
